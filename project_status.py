#!/usr/bin/env python3
"""
Atlas-NYC Project Status Report
"""

import os
import sqlite3
from datetime import datetime
from pathlib import Path

def check_file_exists(filepath):
    """Check if a file exists and return status"""
    return "‚úÖ" if os.path.exists(filepath) else "‚ùå"

def get_database_stats():
    """Get database statistics"""
    stats = {}
    try:
        conn = sqlite3.connect("nightlife.db")
        cursor = conn.cursor()
        
        # Count venues
        cursor.execute("SELECT COUNT(*) FROM venues")
        stats['venues'] = cursor.fetchone()[0]
        
        # Count content
        cursor.execute("SELECT COUNT(*) FROM content")
        stats['content'] = cursor.fetchone()[0]
        
        # Count admin users
        cursor.execute("SELECT COUNT(*) FROM admin_users")
        stats['admins'] = cursor.fetchone()[0]
        
        # Database size
        cursor.execute("SELECT page_count * page_size as size FROM pragma_page_count(), pragma_page_size()")
        size_bytes = cursor.fetchone()[0]
        stats['size_mb'] = size_bytes / (1024 * 1024)
        
        conn.close()
    except Exception as e:
        stats['error'] = str(e)
    
    return stats

def check_configuration():
    """Check configuration status"""
    config = {}
    
    # Check .env file
    if os.path.exists('.env'):
        with open('.env', 'r') as f:
            env_content = f.read()
            config['secret_key'] = "‚úÖ" if "SECRET_KEY=" in env_content and "your-secret-key-here" not in env_content else "‚ùå"
            config['google_maps'] = "‚úÖ" if "GOOGLE_MAPS_API_KEY=AIza" in env_content else "‚ùå"
            config['environment'] = "development" if "ENVIRONMENT=development" in env_content else "production"
    else:
        config['env_exists'] = False
    
    return config

def main():
    """Generate project status report"""
    print("=" * 60)
    print("üåÜ ATLAS-NYC PROJECT STATUS REPORT")
    print("=" * 60)
    print(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n")
    
    # Core files
    print("üìÅ CORE FILES:")
    files = {
        "API Server": "api_server.py",
        "Secure API": "secure_api_server.py",
        "Configuration": "config.py",
        "Database": "nightlife.db",
        "Environment": ".env",
        "Requirements": "requirements.txt"
    }
    
    for name, filepath in files.items():
        status = check_file_exists(filepath)
        print(f"  {status} {name}: {filepath}")
    
    # Features implemented
    print("\n‚ú® FEATURES IMPLEMENTED:")
    features = [
        "‚úÖ FastAPI REST API with pagination",
        "‚úÖ JWT authentication system",
        "‚úÖ Google Maps integration",
        "‚úÖ Venue management system",
        "‚úÖ Content/Instagram story tracking",
        "‚úÖ Admin dashboard",
        "‚úÖ Public interface",
        "‚úÖ Mobile portal",
        "‚úÖ Database indexes for performance",
        "‚úÖ Comprehensive test suite",
        "‚úÖ Production deployment script",
        "‚úÖ NYC venue import script (48 venues)"
    ]
    
    for feature in features:
        print(f"  {feature}")
    
    # Database statistics
    print("\nüìä DATABASE STATISTICS:")
    stats = get_database_stats()
    if 'error' not in stats:
        print(f"  ‚Ä¢ Venues: {stats['venues']}")
        print(f"  ‚Ä¢ Content items: {stats['content']}")
        print(f"  ‚Ä¢ Admin users: {stats['admins']}")
        print(f"  ‚Ä¢ Database size: {stats['size_mb']:.2f} MB")
    else:
        print(f"  ‚ùå Error: {stats['error']}")
    
    # Configuration status
    print("\n‚öôÔ∏è  CONFIGURATION STATUS:")
    config = check_configuration()
    if config.get('env_exists', True):
        print(f"  ‚Ä¢ Secret key configured: {config.get('secret_key', '‚ùå')}")
        print(f"  ‚Ä¢ Google Maps API: {config.get('google_maps', '‚ùå')}")
        print(f"  ‚Ä¢ Environment: {config.get('environment', 'unknown')}")
    else:
        print("  ‚ùå .env file not found")
    
    # Security improvements
    print("\nüîí SECURITY IMPROVEMENTS:")
    security = [
        "‚úÖ Secure SECRET_KEY generated",
        "‚úÖ API key removed from code",
        "‚úÖ JWT authentication implemented",
        "‚úÖ Rate limiting configured",
        "‚úÖ Input validation with Pydantic",
        "‚úÖ SQL injection protection"
    ]
    
    for item in security:
        print(f"  {item}")
    
    # API endpoints
    print("\nüîå API ENDPOINTS:")
    endpoints = [
        "GET  /                    - API info",
        "GET  /health              - Health check",
        "GET  /venues              - List venues (paginated)",
        "POST /venues              - Create venue",
        "GET  /content             - List content (paginated)",
        "POST /content             - Create content",
        "GET  /content/stories     - Active stories",
        "GET  /maps/geocode        - Geocode address",
        "GET  /maps/reverse-geocode - Reverse geocode",
        "GET  /maps/nearby-places  - Find nearby places",
        "GET  /maps/place-details  - Place information",
        "GET  /maps/distance-matrix - Calculate distances"
    ]
    
    for endpoint in endpoints:
        print(f"  {endpoint}")
    
    # Next steps
    print("\nüìã RECOMMENDED NEXT STEPS:")
    next_steps = [
        "1. Set up PostgreSQL for production",
        "2. Configure domain and SSL certificates",
        "3. Set up monitoring (Sentry, Prometheus)",
        "4. Implement Redis caching",
        "5. Create mobile apps (iOS/Android)",
        "6. Add more NYC venues",
        "7. Set up CI/CD pipeline",
        "8. Configure automated backups"
    ]
    
    for step in next_steps:
        print(f"  {step}")
    
    print("\nüöÄ QUICK START:")
    print("  source venv/bin/activate")
    print("  python api_server.py")
    print("  # Visit http://localhost:8002")
    
    print("\n=" * 60)
    print("Project is ready for beta testing! üéâ")
    print("=" * 60)

if __name__ == "__main__":
    main()